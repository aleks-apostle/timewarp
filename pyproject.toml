[project]
name = "timewarp"
version = "0.1.0"
description = "Event-sourced recording + deterministic replay + timeâ€‘travel debugger for LLM agents."
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Timewarp maintainers" },
]
keywords = [
    "LLM",
    "LangGraph",
    "LangChain",
    "event-sourcing",
    "replay",
    "debugger",
    "OpenTelemetry",
    "CLI",
    "determinism",
]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
dependencies = [
    "pydantic>=2.6",
    "orjson>=3.10",
    "zstandard>=0.23",
    "deepdiff>=8.0",
    "rich>=13.7",
]

[project.urls]
Homepage = "https://github.com/your-org/timewarp"
Repository = "https://github.com/your-org/timewarp"
Issues = "https://github.com/your-org/timewarp/issues"
Changelog = "https://github.com/your-org/timewarp/releases"

[dependency-groups]
dev = [
    "ruff>=0.6",
    "mypy>=1.10",
    "pytest>=8.3",
    "langgraph>=0.6",
    "langchain-core>=0.3",
]

[project.optional-dependencies]
adapters = [
    # Kept optional to avoid forcing heavy installs in core.
    "langgraph>=0.6; python_version>='3.10'",
    # LangChain core is used in tests for messages-mode streaming validation
    "langchain-core>=0.3; python_version>='3.10'",
]
otel = [
    "opentelemetry-api>=1.25",
    "opentelemetry-sdk>=1.25",
]
dev = [
    "ruff>=0.6",
    "mypy>=1.10",
    "pytest>=8.3",
    # Include integrations to run adapter tests locally against real APIs
    "langgraph>=0.6",
    "langchain-core>=0.3",
]

[project.scripts]
timewarp = "timewarp.cli:main"

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.packages.find]
where = ["src"]
include = ["timewarp*"]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "PIE", "RUF"]
ignore = ["E203"]              # allow Black/Ruff compatible slicing spacing
fixable = ["ALL"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
warn_unused_ignores = true
warn_redundant_casts = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_optional = true
mypy_path = ["src"]
